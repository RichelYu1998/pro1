一、包装类
	--1、概念
		是为了给对应着的基本类型，提供丰富的功能。
	--2、对应
		--基本类型 byte   short    int     long   float   double   boolean   char
		--包装类型 Byte   Short  Integer   Long   Float   Double   Boolean  Character
	--3、Number
		是所有数字类型包装类的  抽象父类。
	 	--方法：把包装类型  变成 基本类型
		byte byteValue() 
		          以 byte 形式返回指定的数值。 
		abstract  double doubleValue() 
		          以 double 形式返回指定的数值。 
		abstract  float floatValue() 
		          以 float 形式返回指定的数值。 
		abstract  int intValue() 
		          以 int 形式返回指定的数值。 
		abstract  long longValue() 
		          以 long 形式返回指定的数值。 
		 short shortValue() 
		          以 short 形式返回指定的数值。 
	--4、Integer
		--创建对象
			Integer(int value) 
	          	构造一个新分配的 Integer 对象，它表示指定的 int 值。
			static Integer valueOf(int i) 
			          返回一个表示指定的 int 值的 Integer 实例。 
		--常用方法
			int intValue() 
         		 以 int 类型返回该 Integer 的值。 
			static int parseInt(String s) 
			          将字符串参数作为有符号的十进制整数进行解析。 
		--测试
			package cn.tedu.number;

			//这个类用来测试  包装类型
			public class Test1_Integer {
				public static void main(String[] args) {
					//1、创建Integer对象---目的就是把基本类型  包装成  包装类型
					Integer in = new Integer(5) ;
					Integer in2 = Integer.valueOf(5) ; //高效，如果是相同数据就不再存了。
					Integer in3 = Integer.valueOf(5) ; 
					//测试，静态方法valueOf，相同数据不再开辟空间存放了吗？--是的，节省内存和时间，高效。
					System.out.println( in2 == in3 );//true
					
					//2、常用方法
					int value = in.intValue() ;  // 把包装类型的值  变成 基本类型
					System.out.println(value);
					
					int intValue = Integer.parseInt("123");//把  字符串类型的数字转成 基本类型
					System.out.println(intValue);
					
				}
			}
	--5、Double
		--创建对象
			Double(double value) 
          		构造一个新分配的 Double 对象，它表示基本的 double 参数。	
			static Double valueOf(double d) 
			    返回表示指定的 double 值的 Double 实例。           		          
		--常用方法
			double doubleValue() 
          		返回此 Double 对象的 double 值。 
			static double parseDouble(String s)  
			    将字符串参数作为有符号的十进制整数进行解析。 
		--测试
			package cn.tedu.number;

			//这个类用来测试  包装类型
			public class Test1_Integer {
				public static void main(String[] args) {
					//1、创建Integer对象---目的就是把基本类型  包装成  包装类型
					Integer in = new Integer(5) ;
					Integer in2 = Integer.valueOf(5) ;  //高效，底层显示：如果你的数据在-128~127范围内，直接放如缓存数组中(相同数据不再存)。
					Integer in3 = Integer.valueOf(5) ; 
					//测试，静态方法valueOf，相同数据不再开辟空间存放了吗？--是的，节省内存和时间，高效。
					System.out.println( in2 == in3 );//true
					
					//2、常用方法
					int value = in.intValue() ;  // 把包装类型的值  变成 基本类型
					System.out.println(value);
					
					int intValue = Integer.parseInt("123");//把  字符串类型的数字转成 基本类型
					System.out.println(intValue);
					
					//1、创建Double对象 -- 目的就是把一个 基本类型  转成  包装类型
					Double d = new Double(5.5);
					Double d2 = Double.valueOf(5.5);//高效？不高效，底层显示和new一样
					
					//2、常用方法
					double value1 = d2.doubleValue(); //把  包装类型 变回成 基本类型
					System.out.println(value1);
					
					double doubleVal = Double.parseDouble("5.5"); //把 字符串类型的小数 变成  基本类型
					System.out.println(doubleVal);
					
				}
			}

二、Date
	--1、概述
		表示特定的瞬间，精确到毫秒。
	--2、创建对象
		Date() 
          	分配 Date 对象并初始化此对象，以表示分配它的时间（精确到毫秒）。
	--3、常见方法
		对于日期的年月日  时分秒  等操作的获取
	--4、测试	
		package cn.tedu.number;
		import java.util.Date;
		//这个类用来测试 Date
		public class Test2_Date {
			public static void main(String[] args) {
				//1、创建对象
				Date date = new Date(); 
				//2、常用方法
				System.out.println( date.getYear()  );//获取从1900到现在多少年了
				System.out.println( date.getDate()  );//获取今天是一个月中的第几天
				System.out.println( date.getDay()  );//获取今天是一周中的第几天
				System.out.println( date.getHours()  );//获取现在是几点了
				System.out.println( date.getMinutes()  );//获取现在是多少分钟
				System.out.println( date.getMonth()  );//获取月份，4   ---  底层源码显示：会获取到当前月份-1。
				System.out.println( date.getSeconds()  );//获取多少秒
				System.out.println( date.getTime()  );//获取1970 年 1 月 1 日 0点到现在的毫秒值
				System.out.println( date.toLocaleString() );//2020-5-16 11:46:32
				
			}
		}

三、日期工具SimpleDateFormat
	--1、概述
		用来把Date类型  和  字符串类型的日期互转。
	--2、创建对象
		SimpleDateFormat(String pattern) 
		--数据格式：y表示年  M表示月  d表示日 H表示小时  m表示分钟  s表示秒
	--3、常见方法
        format(Date)：把Date格式化成字符串
		parse(String)：把String解析成Date	
	--4、 练习1 ：计算存活天数
		package cn.tedu.number;
		import java.text.ParseException;
		import java.text.SimpleDateFormat;
		import java.util.Date;
		import java.util.Scanner;
		//这个类用来测试  存活天数
		public class Test3_SDformat {
			public static void main(String[] args) throws Exception {
		//		1、接收用户输入的出生日期(String类型)
				String birthday = new Scanner(System.in).nextLine() ; 
				
		//		2、把String类型的日期  转成  Date类型(需要工具类SimpleDateFormat)
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				Date date = sdf.parse(birthday) ;
				
		//		3、获取出生时的毫秒值(getTime)  
				long birth = date.getTime() ;
		//		4、获取当前的毫秒值 
				long now = System.currentTimeMillis() ;
		//		5、输出时间差(换算成天。ms) 
				System.out.println(  (now-birth)/1000/60/60/24    ) ;
				
			}
		}
 
四、BigDecimal/BigInteger		
	--1、在java运算中，浮点数运算会不精确。解决方案就是BigDecimal。
	--2、在java运算中，可能会有超大整数运算，超出了long范围。解决方案就是BigInteger。
	--3、创建对象
		BigDecimal(double val) 
		BigDecimal(String val) 
	--4、常用方法
		加法运算：BigDecimal add(BigDecimal augend)  
		除法运算：BigDecimal divide(BigDecimal divisor) 
		乘法运算：BigDecimal multiply(BigDecimal multiplicand)  
		减法运算：BigDecimal subtract(BigDecimal subtrahend)  
	--5、测试
		package cn.tedu.number;

		import java.math.BigDecimal;
		import java.util.Scanner;

		//这个类用来测试 浮点数运算
		public class Test4_Double {
			public static void main(String[] args) {
				// method();//暴露问题
				method2();// 解决浮点运算不精确的现象 BigDecimal
			}

			public static void method2() {
				// 1、接收用户输入的两个小数
				double a = new Scanner(System.in).nextDouble();
				double b = new Scanner(System.in).nextDouble();
				//2、创建对象 --  建议使用 String类型  的构造方法
				BigDecimal bd1 = new BigDecimal(a+"");
				BigDecimal bd2 = new BigDecimal(b+"");
				
				// 3、做运算
				BigDecimal bd3 ; //定义bd3保存计算结果
				bd3 = bd1.add(bd2) ;//加法
				System.out.println(bd3);
				bd3 = bd1.subtract(bd2) ;//减法
				System.out.println(bd3);
				bd3 = bd1.multiply(bd2) ;//乘法
				System.out.println(bd3);
		//		bd3 = bd1.divide(bd2) ;//除法java.lang.ArithmeticException: 除不尽
				//-------------divide(a,b,c)--a是指要运算的对象名  ---b是指要保留几位小数 ---c是指舍入方式
				bd3 = bd1.divide(bd2,3,BigDecimal.ROUND_HALF_UP) ;//除法
				System.out.println(bd3);
			}

			public static void method() {
				// 1、接收用户输入的两个小数
				double a = new Scanner(System.in).nextDouble();
				double b = new Scanner(System.in).nextDouble();

				// 2、做运算
				System.out.println(a + b);// 不精确
				System.out.println(a - b);// 不精确
				System.out.println(a * b);// 不精确
				System.out.println(a / b);// 不精确

			}
		}
五、File
	--1、概念
		文件和目录路径名的抽象表示形式。 
	--2、创建对象
		File(String pathname) 
          	通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例。
	--3、常用方法
		略。。。参考网页版笔记。
	--4、测试
		package cn.tedu.number;
		import java.io.File;
		import java.io.IOException;
		import java.util.Arrays;

		//这个类用来测试  File 
		public class Test5_File {
			public static void main(String[] args) throws IOException {
				//1、创建File对象  --  参数是文件路径或者文件夹路径
				File f = new File("D:\\iotest\\1.txt");//封装一个文件路径
				//2、常见方法
				//文件文件夹属性
				System.out.println(  f.length()  );//获取文件的字节量
				System.out.println(  f.exists()  );//判断文件是否存在
				System.out.println(  f.isFile()  );//判断是一个文件
				System.out.println(  f.isDirectory()  );//判断是一个文件夹
				System.out.println(  f.getName()  );//获取文件名称
				System.out.println(  f.getParent()  );//获取父目录
				System.out.println(  f.getAbsolutePath()  );//获取完整路径
				//创建  删除
				System.out.println(  f.createNewFile()  );//是否成功的新建了文件
				
				f = new File("D:\\iotest\\m"); //封装一个文件夹路径
				System.out.println(  f.mkdir()  );//自动创建一级不存在的目录
				
				f = new File("D:\\iotest\\x\\y\\z"); //封装一个文件夹路径
				System.out.println(  f.mkdirs()  );//自动创建多级不存在的目录
				
				f = new File("D:\\iotest\\2.txt"); 
				System.out.println(  f.delete()  );//删除文件 或  空文件夹
				
				//列表
				f = new File("D:\\iotest");  //封装一个文件夹路径
				String[] strs = f.list() ;//获取文件名并存入数组中
				System.out.println(Arrays.toString(strs));
				
				File[] files = f.listFiles() ;//获取每个文件并封装成File对象存入数组中
				System.out.println(Arrays.toString(files));
				
			}
		}	

六、递归
	--1、概念
		在方法内部，调用方法本身。
	--2、递归求目录总大小
		package cn.tedu.number;

		import java.io.File;
		import java.util.Scanner;

		//这个类用来测试 递归
		public class Test6_Digui {
			public static void main(String[] args) {
				//1、接收用户输入的文件夹路径
				String path = new Scanner(System.in).nextLine();
				//2、封装成File对象
				File dir = new File(path);
				//3、调用size()求总大小
				long res = size(dir) ;
				System.out.println(res);
			}
			//4、创建size()求总大小
			public static long size(File dir) {
		//		1、列出文件夹里的所有资源
				File[] files = dir.listFiles() ;
				
		//		2、拿到每个资源。开始判断
				long sum = 0 ; //定义变量，记录字节量和
				for (int i = 0; i < files.length; i++) {
					
					File file = files[i] ; //file表示当前获取到的资源
					if(  file.isFile()  ) {//是文件
		//		3、判断，如果是文件，直接length()求和
						sum = sum + file.length() ;
						
					}else if( file.isDirectory()  ) {//是文件夹
		//		4、判断，如果是文件夹，开始重复的干   1   2   3  4  这几步。。。
						sum = sum + size(file) ;//递归，因为业务开始和size方法一样了
					}
				}
				return sum ;  //把最终统计好的结果 返回给调用位置
			}




		}


	--3、递归删除文件夹
		package cn.tedu.number;

		import java.io.File;
		import java.util.Scanner;

		//这个类用来测试 递归
		public class Test6_Digui {
			public static void main(String[] args) {
				//1、接收用户输入的文件夹路径
				String path = new Scanner(System.in).nextLine();
				//2、封装成File对象
				File dir = new File(path);
				//3、调用size()求总大小
				del(dir) ;
			}
			//4、创建size()求总大小
			public static void del(File dir) {
		//		1、列出文件夹里的所有资源
				File[] files = dir.listFiles() ;
				
		//		2、拿到每个资源。开始判断
				for (int i = 0; i < files.length; i++) {
					
					File file = files[i] ; //file表示当前获取到的资源
					if(  file.isFile()  ) {//是文件
		//		3、判断，如果是文件，直接删除
						file.delete(); 
					}else if( file.isDirectory()  ) {//是文件夹
		//		4、判断，如果是文件夹，开始重复的干   1   2   3  4  这几步。。。
						del(file) ;//递归，因为业务开始和size方法一样了
					}
				}
				dir.delete() ; //删除空文件夹
			}




		}

			          	