一、包装类
	--1、概念
		是为了给对应着的基本类型，提供丰富的功能。
	--2、对应
		--基本类型 byte   short    int     long   float   double   boolean   char
		--包装类型 Byte   Short  Integer   Long   Float   Double   Boolean  Character
	--3、Number
		是所有数字类型包装类的  抽象父类。
	 	--方法：把包装类型  变成 基本类型
		byte byteValue() 
		          以 byte 形式返回指定的数值。 
		abstract  double doubleValue() 
		          以 double 形式返回指定的数值。 
		abstract  float floatValue() 
		          以 float 形式返回指定的数值。 
		abstract  int intValue() 
		          以 int 形式返回指定的数值。 
		abstract  long longValue() 
		          以 long 形式返回指定的数值。 
		 short shortValue() 
		          以 short 形式返回指定的数值。 
	--4、Integer
		--创建对象
			Integer(int value) 
	          	构造一个新分配的 Integer 对象，它表示指定的 int 值。
			static Integer valueOf(int i) 
			          返回一个表示指定的 int 值的 Integer 实例。 
		--常用方法
			int intValue() 
         		 以 int 类型返回该 Integer 的值。 
			static int parseInt(String s) 
			          将字符串参数作为有符号的十进制整数进行解析。 
		--测试
			package cn.tedu.number;

			//这个类用来测试  包装类型
			public class Test1_Integer {
				public static void main(String[] args) {
					//1、创建Integer对象---目的就是把基本类型  包装成  包装类型
					Integer in = new Integer(5) ;
					Integer in2 = Integer.valueOf(5) ; //高效，如果是相同数据就不再存了。
					Integer in3 = Integer.valueOf(5) ; 
					//测试，静态方法valueOf，相同数据不再开辟空间存放了吗？--是的，节省内存和时间，高效。
					System.out.println( in2 == in3 );//true
					
					//2、常用方法
					int value = in.intValue() ;  // 把包装类型的值  变成 基本类型
					System.out.println(value);
					
					int intValue = Integer.parseInt("123");//把  字符串类型的数字转成 基本类型
					System.out.println(intValue);
					
				}
			}
	--5、Double
		--创建对象
			Double(double value) 
          		构造一个新分配的 Double 对象，它表示基本的 double 参数。	
			static Double valueOf(double d) 
			    返回表示指定的 double 值的 Double 实例。           		          
		--常用方法
			double doubleValue() 
          		返回此 Double 对象的 double 值。 
			static double parseDouble(String s)  
			    将字符串参数作为有符号的十进制整数进行解析。 
		--测试
			package cn.tedu.number;

			//这个类用来测试  包装类型
			public class Test1_Integer {
				public static void main(String[] args) {
					//1、创建Integer对象---目的就是把基本类型  包装成  包装类型
					Integer in = new Integer(5) ;
					Integer in2 = Integer.valueOf(5) ;  //高效，底层显示：如果你的数据在-128~127范围内，直接放如缓存数组中(相同数据不再存)。
					Integer in3 = Integer.valueOf(5) ; 
					//测试，静态方法valueOf，相同数据不再开辟空间存放了吗？--是的，节省内存和时间，高效。
					System.out.println( in2 == in3 );//true
					
					//2、常用方法
					int value = in.intValue() ;  // 把包装类型的值  变成 基本类型
					System.out.println(value);
					
					int intValue = Integer.parseInt("123");//把  字符串类型的数字转成 基本类型
					System.out.println(intValue);
					
					//1、创建Double对象 -- 目的就是把一个 基本类型  转成  包装类型
					Double d = new Double(5.5);
					Double d2 = Double.valueOf(5.5);//高效？不高效，底层显示和new一样
					
					//2、常用方法
					double value1 = d2.doubleValue(); //把  包装类型 变回成 基本类型
					System.out.println(value1);
					
					double doubleVal = Double.parseDouble("5.5"); //把 字符串类型的小数 变成  基本类型
					System.out.println(doubleVal);
					
				}
			}

二、Date
	--1、概述
		表示特定的瞬间，精确到毫秒。
	--2、创建对象
		Date() 
          	分配 Date 对象并初始化此对象，以表示分配它的时间（精确到毫秒）。
	--3、常见方法
		对于日期的年月日  时分秒  等操作的获取
	--4、测试	
		package cn.tedu.number;
		import java.util.Date;
		//这个类用来测试 Date
		public class Test2_Date {
			public static void main(String[] args) {
				//1、创建对象
				Date date = new Date(); 
				//2、常用方法
				System.out.println( date.getYear()  );//获取从1900到现在多少年了
				System.out.println( date.getDate()  );//获取今天是一个月中的第几天
				System.out.println( date.getDay()  );//获取今天是一周中的第几天
				System.out.println( date.getHours()  );//获取现在是几点了
				System.out.println( date.getMinutes()  );//获取现在是多少分钟
				System.out.println( date.getMonth()  );//获取月份，4   ---  底层源码显示：会获取到当前月份-1。
				System.out.println( date.getSeconds()  );//获取多少秒
				System.out.println( date.getTime()  );//获取1970 年 1 月 1 日 0点到现在的毫秒值
				System.out.println( date.toLocaleString() );//2020-5-16 11:46:32
				
			}
		}

三、日期工具SimpleDateFormat
	--1、概述
		用来把Date类型  和  字符串类型的日期互转。
	--2、创建对象
		SimpleDateFormat(String pattern) 
	--3、常见方法
        format(Date)：把Date格式化成字符串
		parse(String)：把String解析成Date	
	--4、 练习1 ：计算存活天数
		开发步骤：
		1、接收用户输入的出生日期(String类型)
		2、把String类型的日期  转成  Date类型(需要工具类SimpleDateFormat)
		3、获取出生时的毫秒值(getTime)  
		4、获取当前的毫秒值  
		5、输出时间差(换算成天。ms) 
		




			          	