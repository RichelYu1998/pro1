一、List接口方法测试
	--代码
		package cn.tedu.collection;

		import java.util.ArrayList;
		import java.util.Iterator;
		import java.util.List;
		import java.util.ListIterator;

		//这个类用来测试 List接口的使用：元素可重复  +  元素都有序  + 元素有索引
		public class Test6_List {
			public static void main(String[] args) {
				//1、创建List对象
				List<String> list = new ArrayList<>();
				
				//TODO 2、从Collection接口中继承来的方法
				
				//3、自己的特有方法
				list.add("java");
				list.add("php");
				list.add("hadoop");
				list.add("hadoop");
				list.add(null);
				list.add("hadoop");
				
				list.add(0,"皮皮霞");//按照索引添加元素
				System.out.println(list.get(1));//获取指定索引存着的元素
				System.out.println(list.indexOf("hadoop"));//获取第一次出现的索引值
				System.out.println(list.lastIndexOf("hadoop"));//获取最后一次出现的索引值
				
				System.out.println(list.remove(1));//把指定索引的元素干掉
				System.out.println(list.set(0,"刘沛霞"));//替换
				System.out.println(list);
				
				List<String> list2 = list.subList(1, 4);//截取子List，含头不含尾[1,4)
				System.out.println(list2);
				
				//--------  list集合的迭代  ---------------
				//1、继承来的方法 Iterator<E> iterator() 返回按适当顺序在列表的元素上进行迭代的迭代器。 
				Iterator<String> it = list.iterator() ;
				while(it.hasNext() ) {//判断有下一个元素就返回true
					String value = it.next() ;//用来获取元素并且把指针后移
					System.out.println(value);
				}
				//2、List接口特有的ListIterator<E> listIterator()   返回此列表元素的列表迭代器（按适当顺序）。 
				//listIterator()  iterator() 对比：iterator() 来自父接口。listIterator()是子接口的特有功能。
				//区别是：子接口除了可以使用父接口的所有功能的同时，又做了功能扩展。不仅能向后顺序遍历而且可以向前逆向遍历。
				ListIterator<String> it2 = list.listIterator() ;
				while( it2.hasNext() ) {//向后判断，有没有元素
					String value = it2.next() ;//获取后面的元素
					System.out.println(value);
				}
				//3、下标遍历
				for(int i = 0 ; i < list.size() ; i++) {//下标最大值是集合长度-1
					System.out.println( list.get(i)  );//根据下标获取元素
				}
				//4、增强for  foreach
				//for(遍历到的数据类型   变量名    :   数组 | Collection集合) { }
				for(String   s    :   list) { 
					System.out.println(s);
				}
				
			}
		}

二、ArrayList
	--1、特点
		是List接口的实现类，拥有List接口的特点，可以重复，可以有序，有索引。
		底层使用数组实现。方便于查询业务。
	--2、创建对象
		ArrayList() 
          	构造一个初始容量为 10 的空列表。
	--3、测试方法
		package cn.tedu.collection;

		import java.util.ArrayList;

		//这个类用例测试  ArrayList
		public class Test1_ArrayList {
			public static void main(String[] args) {
				//TODO 1、创建ArrayList对象
				ArrayList<Integer> al = new ArrayList<>();
				//TODO 2、调用方法
				al.add(1);
				al.add(2);
				al.add(3);
				al.add(4);
				al.add(100);//底层会完成自动装箱的过程，把基本类型的值变成包装类型，存入集合中
				//remove()可以按照下标删除，也可以直接指定元素值
				System.out.println(  al.remove(2)  );//按照下标删
				//想要直接删除数字100--需要删除包装类型的100
				System.out.println(  al.remove( Integer.valueOf(100) ) );
				System.out.println(al);
				
			}
			
		}

三、LinkedList
	--1、特点
		List接口的实现类，拥有List接口的特点，可以重复，可以有索引，有序。
		底层是一个链表的实现。不适用于查询，适用于增删业务。
	--2、创建对象
		LinkedList() 
           构造一个空列表。
	--3、特有方法
		void addFirst(E e) 
          将指定元素插入此列表的开头。 
		void addLast(E e) 
		          将指定元素添加到此列表的结尾。 
		E removeFirst() 
		         移除并返回此列表的第一个元素。 
		E removeLast() 
		          移除并返回此列表的最后一个元素。
		E getFirst() 
		          返回此列表的第一个元素。 
		E getLast() 
		          返回此列表的最后一个元素。         
		E element() 
		          获取但不移除此列表的头（第一个元素）。 
		boolean offer(E e) 
		          将指定元素添加到此列表的末尾（最后一个元素）。 
		 boolean offerFirst(E e) 
		          在此列表的开头插入指定的元素。 
		 boolean offerLast(E e) 
		          在此列表末尾插入指定的元素。 
		 E peek() 
		          获取但不移除此列表的头（第一个元素）。 
		 E peekFirst() 
		          获取但不移除此列表的第一个元素；如果此列表为空，则返回 null。 
		 E peekLast() 
		          获取但不移除此列表的最后一个元素；如果此列表为空，则返回 null 
		 E poll() 
		          获取并移除此列表的头（第一个元素） 
		 E pollFirst() 
		          获取并移除此列表的第一个元素；如果此列表为空，则返回 null。 
		 E pollLast() 
		          获取并移除此列表的最后一个元素；如果此列表为空，则返回 null。 
		 E pop() 
		          从此列表所表示的堆栈处弹出一个元素。 
		 void push(E e) 
		          将元素推入此列表所表示的堆栈。 
 






		