一、字节流读取
	--1、InputStream抽象类
	   --是字节流读取的父类。而且是一个抽象类。
	      所以我们就不学习创建对象，我们只能学习他的共性方法。
	   --常用方法
	   	void close() 
			关闭此输入流并释放与该流关联的所有系统资源。 
		abstract int read() 
			  从输入流中读取数据的下一个字节。 
		int read(byte[] b) 
			  从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。 
		int read(byte[] b, int off, int len) 
			  将输入流中最多 len 个数据字节读入 byte 数组。 
	--2、FileInputStream子类
	    --作为子类，我们可以学习他的创建对象的方式，而方法都是从父类继承来的。
	    --创建对象
	    	FileInputStream(String name) 
		FileInputStream(File file) 
	--3、BufferedInputStream子类
	    --作为子类，我们可以学习他的创建对象的方式，而方法都是从父类继承来的。	
	    --BufferedInputStream 为另一个输入流添加一些功能，创建一个内部缓冲区数组。
	    --创建对象
	    	BufferedInputStream(InputStream in)
	--4、测试
		package cn.tedu.io;

		import java.io.BufferedInputStream;
		import java.io.File;
		import java.io.FileInputStream;
		import java.io.FileNotFoundException;
		import java.io.IOException;
		import java.io.InputStream;

		//这个类用来测试  IO流读取
		public class Test1_In {
			public static void main(String[] args) {
		//		method() ;//FileInputStream字节流读取
				method2();//BufferedInputStream读取
			}
			public static void method2() {
				try {
					//1，创建对象
					InputStream in = new BufferedInputStream(
											new FileInputStream("D:\\iotest\\1.txt"));
					
					//TODO 2，开始读取
					
					//3，释放资源
					in.close();
					
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
			//字节流读取
			public static void method() {
				try {
					//1、创建对象  -- 参数是  文件 的路径
					InputStream in  = new FileInputStream("D:\\iotest\\1.txt");//触发String参数的构造
					InputStream in2  = new FileInputStream(new File("D:\\iotest\\1.txt"));//触发File参数的构造
					//2、开始读取
					/*
					 * System.out.println( in.read() ); //97，由于读取到了a字符，而且read()返回值是int类型。
					 * System.out.println( in.read() ); 
					 * System.out.println( in.read() );
					 * 
					 * System.out.println( in.read() ); //由于没有数据了，所以read()返回-1
					 */	
					int b = 0 ; //定义变量，记录读取到的值
					while( ( b = in.read() ) != -1 ) {//因为读到-1时就没数据了
						System.out.println(b);
					}
					//3、释放资源
					in.close();
		//			System.out.println(in.read());//Stream Closed
				} catch (IOException e) {
					e.printStackTrace();
				}
				
			}
		}
二、字符流读取
	--1、Reader抽象类
	  --是字符读取流的父类。
	     被修饰成了抽象类，所以不能创建对象。我们只能学习他的共性方法。
	  --共性方法
		abstract  void close() 
		            关闭该流并释放与之关联的所有资源。 
		int read() 
		            读取单个字符。 
		int read(char[] cbuf) 
			  将字符读入数组。 
		abstract  int read(char[] cbuf, int off, int len) 
			  将字符读入数组的某一部分。 
		int read(CharBuffer target) 
		  试图将字符读入指定的字符缓冲区。 
	--2、FileReader子类
	    --FileReader 用于读取字符流。读取字符文件的便捷类。
	    --创建对象
		FileReader(File file) 
		FileReader(String fileName) 
	--3、BufferedReader子类	
	    --从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。 
		可以指定缓冲区的大小，或者可使用默认的大小。
	    --创建对象
	    	BufferedReader(Reader in) 
	--4、测试	
		package cn.tedu.io;

		import java.io.BufferedReader;
		import java.io.File;
		import java.io.FileNotFoundException;
		import java.io.FileReader;
		import java.io.IOException;
		import java.io.Reader;
		//这个类用来测试  字符流读取
		//总结：
		//1、执行效率上：BufferedReader >  FileReader 
		//2、原因是：底层维护了一个char[] ，可以按照数组的长度一次性的读取一大批数据。默认的容量是8192字节量，也就是8K。
		public class Test2_In2 {
			public static void main(String[] args) {
		//		method();//FileReader读取
				method2();//BufferedReader读取
			}
			public static void method2() {
				try {
					//1、创建对象
					Reader in = new BufferedReader(new FileReader("D:\\iotest\\1.txt"));
					//2、开始读取
					int b = 0 ;
					while(  ( b = in.read() ) != -1) {
						System.out.println(b);
					}
					//3、释放资源
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			//FileReader读取
			public static void method() {
				try {
					//1、创建对象
					Reader in = new FileReader("D:\\iotest\\1.txt") ;
					Reader in2 = new FileReader(new File("D:\\iotest\\1.txt")) ;
					//2、开始读取
					int b = 0 ; //定义变量，记录读取到的数据
					while( ( b = in.read() )  != -1 ) {
						System.out.println(b);
					}
					//3、释放资源
					in.close();
					
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
			
		}
三、字节流写出
	--1、OutputStream抽象类
	    -- 是字节流输出流的父类，而且是抽象类。所以不能创建对象，
	        我们还是只能学习他的共性方法。
	    -- 常用方法
	    	 void close() 
			关闭此输出流并释放与此流有关的所有系统资源。 
		 void flush() 
			  刷新此输出流并强制写出所有缓冲的输出字节。 
		 void write(byte[] b) 
			  将 b.length 个字节从指定的 byte 数组写入此输出流。 
		 void write(byte[] b, int off, int len) 
			  将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。 
		 abstract  void write(int b) 
			  将指定的字节写入此输出流。 
	--2、FileOutputStream子类
	    --文件输出流是用于将数据写入 File 或 FileDescriptor 的输出流。
	    --创建对象
		FileOutputStream(File file) 
		FileOutputStream(String name) 
		FileOutputStream(File file, boolean append) 
		FileOutputStream(String name, boolean append)
	--3、BufferedOutputStream子类
	    --该类实现缓冲的输出流。
	    --创建对象
		BufferedOutputStream(OutputStream out) 
	--4、测试
		package cn.tedu.io;

		import java.io.BufferedOutputStream;
		import java.io.File;
		import java.io.FileNotFoundException;
		import java.io.FileOutputStream;
		import java.io.IOException;
		import java.io.OutputStream;

		//这个类用来测试  字节流写出
		//总结：
		//1、执行效率上：BufferedOutputStream >  FileOutputStream 
		//2、原因是：底层维护了一个byte[] ，可以按照数组的长度一次性的向磁盘中写出一大批数据。默认的容量是8192字节量，也就是8K。
		public class Test3_Out {
			public static void main(String[] args) {
		//		method();//普通的写出流FileOutputStream
				method2();//高效的写出流BufferedOutputStream
			}
			public static void method2() {
				try {
					//1、创建对象
		//			OutputStream out = new BufferedOutputStream(
		//									new FileOutputStream("D:\\iotest\\1.txt"));//覆盖
					OutputStream out = new BufferedOutputStream(
										new FileOutputStream("D:\\iotest\\1.txt",true));//追加
					
					//2、开始写出
					out.write(48);
					out.write(48);
					out.write(48);
					
					//3、释放资源
					out.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			public static void method() {
				try {
					//1、创建对象－－默认是数据覆盖模式，也可以改成追加模式，需要传入第二参数true
					OutputStream out = new FileOutputStream("D:\\iotest\\1.txt");//默认覆盖
		//			OutputStream out = new FileOutputStream("D:\\iotest\\1.txt",true);//数据追加
		//			OutputStream out2 = new FileOutputStream(new File("D:\\iotest\\1.txt")) ;
					
					//2、开始写出
					out.write(49);
					out.write(50);
					out.write(51);
					
					//3、释放资源
					out.close();
				} catch (IOException e) {
					e.printStackTrace();
				}		
			}
		}




四、字符流写出
	--1、Writer抽象类
		--是字符流写出流的父类，而且是一个抽象类。不能创建对象，只能学习他的共性方法。
		--常用方法
			abstract  void close() 
          			关闭此流，但要先刷新它。 
			abstract  void flush() 
			          刷新该流的缓冲。 
			 void write(char[] cbuf) 
			          写入字符数组。 
			abstract  void write(char[] cbuf, int off, int len) 
			          写入字符数组的某一部分。 
			 void write(int c) 
			          写入单个字符。 
			 void write(String str) 
			          写入字符串。 
			 void write(String str, int off, int len) 
			          写入字符串的某一部分。 
	--2、FileWriter子类
		--创建对象
			FileWriter(File file) 
			FileWriter(String fileName) 
			FileWriter(String fileName, boolean append) 
			FileWriter(File file, boolean append) 
	--3、BufferedWriter子类
		--将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。 
			可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了
		--创建对象
			BufferedWriter(Writer out) 
	--4、测试
		package cn.tedu.io;

		import java.io.BufferedWriter;
		import java.io.File;
		import java.io.FileWriter;
		import java.io.IOException;
		import java.io.Writer;

		//这个类用来测试  字符流写出
		//总结：
		//1、执行效率上：BufferedWriter >  FileWriter 
		//2、原因是：底层维护了一个char[] ，可以按照数组的长度一次性的向磁盘中写出一大批数据。默认的容量是8192字节量，也就是8K。
		public class Test4_Out2 {
			public static void main(String[] args) {
		//		method(); //FileWriter写出
				method2(); //BufferedWriter写出
			}
			public static void method2() {
				try {
					//1、创建对象
					Writer out = new BufferedWriter(new FileWriter("D:\\iotest\\1.txt"));
					//2、开始写出
					out.write("hello");
					//3、释放资源
		//			out.flush();//用来把缓冲区的数据刷到磁盘中做展示
					out.close();//1、把数据刷出去  2、关闭资源
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			public static void method() {
				try {
					//1、创建对象
		//			Writer out = new FileWriter("D:\\iotest\\1.txt") ;//覆盖
					Writer out = new FileWriter("D:\\iotest\\1.txt",true) ;//追加
		//			Writer out2 = new FileWriter(new File("D:\\iotest\\1.txt")) ;
					
					//2、开始写出
					out.write(48);
					out.write(48);
					
					//3、释放资源
					out.close();
					
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
		}

五、练习1：文件复制
	package cn.tedu.io;

	import java.io.BufferedInputStream;
	import java.io.BufferedOutputStream;
	import java.io.FileInputStream;
	import java.io.FileNotFoundException;
	import java.io.FileOutputStream;
	import java.io.IOException;
	import java.io.InputStream;
	import java.io.OutputStream;

	//这个类用来测试文件复制  --高效的字节流
	public class Test5 {
		public static void main(String[] args) {
			try {
	//		1、读取源文件的数据
		InputStream in = new BufferedInputStream(new FileInputStream("D:\\iotest\\1.txt"));
	//		2、写出数据到目标文件中
		OutputStream out = new BufferedOutputStream(new FileOutputStream("D:\\iotest\\2.txt"));
				
				//3、读取数据同时写出，边读边写！！
				int b = 0 ;//定义变量，记录读取到的数据
				while(( b = in.read() ) !=  -1 ) {
					out.write(b);//把读取到的数据，写出
				}
				
				//4、释放资源
				in.close();
				out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
		}
	}

六、作业
	1、使用字符流改造Test5
	2、自己创建大量的数据，并且测试普通对象的读写 和 高效对象的读写 效率问题。
	3、形成Xmind格式的总结文件	
	4、先了解IDEA开发工具

	









