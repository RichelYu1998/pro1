一、模拟多线程售票
	--1、继承Thread
		package cn.tedu.thread;

		//这个类用来测试 多线程售票
		//TODO  为什么数据会出错，分析程序？？？
		//TODO  怎么解决多线程编程中的数据安全隐患？？？
		//TODO  多操作IDEA
		public class Test3_Tickts {
		    public static void main(String[] args) {
		        //3、创建线程对象
		        MyTickets t1 = new MyTickets();
		        MyTickets t2 = new MyTickets();
		        MyTickets t3 = new MyTickets();
		        MyTickets t4 = new MyTickets();
		        t1.start();
		        t2.start();
		        t3.start();
		        t4.start();
		        //4、问题1：需要是卖100张票，目前卖了400张票。为什么？因为tickets是实例变量
		        //每次new都会给对象初始化，4个对象，就初始化了4次有了400张票。--怎么解决？
		        //如果能把tickets变成多个对象间共享的就可以了？--
		    }
		}
		//1、模拟多线程开发
		class MyTickets extends Thread {
		    //定义变量，记录100张票
		//  int tickets = 100; //4.1、实例变量，会new多次就拥有多张票
		    static  int tickets = 100;//4.2、变量共享资源
		    //2、开始卖票 ，写进run()
		    @Override
		    public void run() {
		        while (true) {//一直卖票
		        //tickets = 1，t1 t2 t3 t4开始准备卖票
		            if (tickets > 0) {
		                try {
		                    //5、检查多线程数据有没有安全隐患，最终的大招就是让程序休眠一会10ms
		                    //问题2多卖：同一张票卖给了多个人
		                    //问题3超卖：卖出了0号票
		                    //t1 t2 t3 t4开始睡觉
		                    Thread.sleep(10);
		                } catch (InterruptedException e) {
		                    e.printStackTrace();
		                }
		                //超卖：
		                //假设t1先醒，开始卖票，当前tickets=1，tickets--，输出1，然后自减变成0
		                //假设t2又醒，开始卖票，当前tickets=0，tickets--，输出0，然后自减变成-1
		                //假设t3又醒，开始卖票，当前tickets=-1，tickets--，输出-1，然后自减变成-2
		                //假设t4又醒，开始卖票，当前tickets=-2，tickets--，输出-2，然后自减变成-3
		                //重卖：
		                //假设t1先醒，开始卖票，当前tickets=1，tickets--，输出1，还没来得及改呢！！
		                //假设t2又醒，开始卖票，当前tickets=1，tickets--，输出1，还没来得及改呢！！
		                //假设t3又醒，开始卖票，当前tickets=1，tickets--，输出1，还没来得及改呢！！
		                //假设t4又醒，开始卖票，当前tickets=1，tickets--，输出1，还没来得及改呢！！
		                System.out.println(getName() + "：" + tickets--);
		            } else {
		                break;//票数<=0就结束
		            }
		        }
		    }
		}



	--2、实现Runnable接口
		package cn.tedu.tickets;

		//这个类用来模拟多线程售票
		public class Test1_Tickets2 {
		    public static void main(String[] args) {
		        MyTickets target = new MyTickets();
		        //第一个参数是要绑定的Runnable实现类对象，第二个参数是线程名称
		        Thread t1 = new Thread(target, "窗口1：");
		        Thread t2 = new Thread(target, "窗口2：");
		        Thread t3 = new Thread(target, "窗口3：");
		        Thread t4 = new Thread(target, "窗口4：");
		        t1.start();
		        t2.start();
		        t3.start();
		        t4.start();
		    }
		}
		//1、创建类实现接口
		class MyTickets implements Runnable {
		    int tickets = 100; //定义变量，记录票数
		    //2、写业务
		    @Override
		    public void run() {
		        while (true) {//一直卖票
		            if (tickets > 0) {//有票就卖
		                try {
		                    Thread.sleep(10);//让程序休眠10ms
		                    //问题：发生了重卖和超卖现象
		                } catch (InterruptedException e) {
		                    e.printStackTrace();
		                }
		                //超卖：
		                //假设t1先醒，开始卖票，当前tickets=1，tickets--，输出1，然后自减变成0
		                //假设t2又醒，开始卖票，当前tickets=0，tickets--，输出0，然后自减变成-1
		                //假设t3又醒，开始卖票，当前tickets=-1，tickets--，输出-1，然后自减变成-2
		                //假设t4又醒，开始卖票，当前tickets=-2，tickets--，输出-2，然后自减变成-3
		                //重卖：
		                //假设t1先醒，开始卖票，当前tickets=1，tickets--，输出1，还没来得及改呢！！
		                //假设t2又醒，开始卖票，当前tickets=1，tickets--，输出1，还没来得及改呢！！
		                //假设t3又醒，开始卖票，当前tickets=1，tickets--，输出1，还没来得及改呢！！
		                //假设t4又醒，开始卖票，当前tickets=1，tickets--，输出1，还没来得及改呢！！
		                //Thread.currentThread().getName()获取正在执行任务的线程的名称
		                System.out.println(Thread.currentThread().getName()+" ~ "+tickets--);
		            } else {
		                break; //结束死循环
		            }
		        }
		    }
		}
二、同步锁
	--1、原理：是指给你的共享资源加锁。还是可以让多个线程操作共享资源，只不过哪个线程有钥			匙，拿着钥匙进来开锁使用共享资源，没有钥匙的线程等待。--同步的锁，
	--2、同步和异步的区别：
		--同步：是需要拿着钥匙开锁，同一时刻只能有一个线程操作共享资源，其他线程排队等待。			   牺牲了效率，提高了安全。
		--异步：是没有排队的现象，大家同时使用了共享资源。提高了效率，牺牲了数据安全。
		--举例：可以看做是你使用教室的门这个共享资源的过程
	--3、语法
		synchronized(对象){   需要同步的代码；  }
	--4、使用锁
		--多线程安全问题是如何出现的？常见情况是由于线程的随机性+访问延迟。
		--以后如何判断程序有没有线程安全问题？在多线程程序中+有共享数据+多条语句操作共享数据。
		--锁的位置：不能太大，会降低效率。也不能太小，就相当于没锁住没用。所以找个合适的位置。
		--锁的对象：要求多个线程间使用的是同一把锁。
		--使用范围：可以用在方法上，也可以用在代码块上
	--5、改造
		package cn.tedu.tickets;

		//这个类用来模拟多线程售票
		public class Test1_Tickets2 {
		    public static void main(String[] args) {
		        MyTickets target = new MyTickets();
		        //第一个参数是要绑定的Runnable实现类对象，第二个参数是线程名称
		        Thread t1 = new Thread(target, "窗口1：");
		        Thread t2 = new Thread(target, "窗口2：");
		        Thread t3 = new Thread(target, "窗口3：");
		        Thread t4 = new Thread(target, "窗口4：");
		        t1.start();
		        t2.start();
		        t3.start();
		        t4.start();
		    }
		}
		class MyTickets implements Runnable {
		    int tickets = 100; //定义变量，记录票数
		    Object obj = new Object();
		    @Override
		// 4、锁方法，把方法整体都锁起来，虽然降低访问效率但是提高了安全性。默认使用的锁对象是this
		//  synchronized public void run() {
		    public void run() {
		        while (true) {//一直卖票
		            //1、可以把有线程安全隐患的 代码 锁起来--同步的锁代码块
		            //2、锁的位置：要合理，不能太大也不能太小。建议从共享资源开始位置，一直到使用刚结束都锁起来
		            //3、锁的对象：锁代码块的锁对象可以是任意对象，只要是同一个对象就可以。
		//            synchronized (new Object()){//没锁住？？线程间使用的不是同一个锁对象，每个线程进来都new了一个自己的锁
		//            synchronized (obj){//锁成功，因为多个线程使用的都是同一个Object对象。
		            synchronized (this){//锁成功，因为多个线程使用的都是同一个本类的对象。
		                if (tickets > 0) {//有票就卖
		                    try {
		                        Thread.sleep(10);//让程序休眠10ms
		                    } catch (InterruptedException e) {
		                        e.printStackTrace();
		                    }
		                    System.out.println(Thread.currentThread().getName() + " ~ " + tickets--);
		                } else {
		                    break; //结束死循环
		                }
		            }
		        }
		    }
		}

三、单例设计模式
	--1、原理：通过一定的程序设计手段，实现，整个工程只有一个唯一的实例。
	--2、饿汉式
		package cn.tedu.tickets;
		//这个类用来测试 单例设计模式  --饿汉式
		public class Test2_Single {
		    public static void main(String[] args) {
		        MySingle my = MySingle.getMy();
		        MySingle my2 = MySingle.getMy();
		        //==用来比较引用类型变量保存着的地址值
		        System.out.println(my  ==  my2);
		        //TODO  现在的程序中，有共享资源吗？  --有  my
		        // my有数据安全隐患吗？？ --没有，因为在多线程编程中，是会被多条语句操作时，共享数据才有隐患
		    }
		}
		class MySingle{
		    //1、私有化构造方法---目的是为了不让外界随意new
		    private MySingle(){ }
		    //2、在类的内部，创建好对象 ----修饰成static是因为，getMy() 是静态的，要关联的资源也必须是静态的
		    static private  MySingle my = new MySingle();
		    //3、提供公共的全局访问点--修饰成static是因为，外界无法通过对象访问，现在可以通过类名访问
		    static public MySingle getMy(){
		        //把自己创建好的对象 返回给 外界调用位置
		        return my ;
		    }
		}



	--3、懒汉式
		package cn.tedu.tickets;
		//这个类用来测试 单例设计模式  --  懒汉式
		//总结：
		//1、懒汉式和饿汉式  区别：创建对象的时机不同，饿汉式不管你什么时候需要都第一间把对象加载进内存，是静态的资源比较占用内存。
		//2、懒汉式的好处：是可以延迟加载，需要创建时才会帮你创建对象。
		//3、面试点： 延迟加载的思想  +  线程安全的解决方案
		public class Test3_Single2 {
		    public static void main(String[] args) {
		        MySingle2 my = MySingle2.getMy();
		        MySingle2 my2 = MySingle2.getMy();
		        System.out.println(my == my2);//true
		        //TODO  现在的程序中，有共享资源吗？--有 my
		        //TODO  共享数据有安全隐患吗？？--有多条语句操作了共享数据，如果是多线程编程一定有隐患！！--加锁
		    }
		}
		class MySingle2 {
		    //1、私有化构造方法---目的是为了不让外界随意new
		    private MySingle2(){}
		    //2、在类的内部，创建好对象 ----修饰成static是因为，getMy() 是静态的，要关联的资源也必须是静态的
		    static private MySingle2 my ;
		    //3、提供公共的全局访问点--修饰成static是因为，外界无法通过对象访问，现在可以通过类名访问
		    //--修饰成synchronized  方法，是用来解决线程安全隐患问题，降低了访问效率。
		    synchronized static public MySingle2 getMy(){
		        if(my==null){//增强代码的健壮性
		            my = new MySingle2();//不会一开始就创建对象，而是什么时候需要什么时候创建  ---  延迟访问 / 延迟加载
		        }
		        return my ; //把自己创建好的对象 返回给 外界调用位置
		    }
		}

四、注解
	--1、概念
		注解的出现优化了程序的编程，减少了代码的编写。注解Annotation的标志是@ ，每个注解都有不同的功能。
	--2、分类
		--jdk提供的注解(5个)  --@Override
		--元注解(5个)
		--配合元注解可以自定义注解
	--3、元注解
		--@Target：用来描述注解的存在位置。他的值被维护在了ElementType.class中。
			可以指定出现在类的具体位置。
				TYPE   类/接口上用
				METHOD   方法上用
				FIELD    成员变量上用....
		--@Retention：用来描述注解的生命周期。值被维护在了RetentionPolicy.class中
			可以指定注解可以存活多久
				SOURCE  在源码文件中生效
				CLASS  在字节码文件中生效
				RUNTIME  在运行时期生效
	--4、自定义注解
		package cn.tedu.tickets;

		import java.lang.annotation.ElementType;
		import java.lang.annotation.Retention;
		import java.lang.annotation.RetentionPolicy;
		import java.lang.annotation.Target;
		//这个类用来测试 自定义注解
		public class Test4_Annotation {
		}
		//1、自定义注解 ： @interface  注解名  --语法和Java不同
		//2、@Target指定注解可以出现的位置
		@Target({ ElementType.TYPE , ElementType.METHOD , ElementType.FIELD })//在类上/方法上/属性上
		//3、@Retention指定注解的生命周期
		@Retention(RetentionPolicy.SOURCE)
		//源码文件中生效
		@interface Test {
		    //5、给注解加功能--属性
		//    String name() ;
		    String name() default "jack" ;//8、给属性富裕默认值
		    String value() ;//9、特殊属性 value，特殊在使用时可以直接赋值，如：@Test("123")
		}
		//6、使用注解时，给name属性赋值
		//@Test(name="helloTest")
		@Test("123") //7、虽然有了name属性，但是我还想便捷的使用
		//4、使用注解  ：  @注解名
		//@Test
		class HelloTest {
		//    @Test 注解的位置只能用在类上,其他位置会报错
		    String name;
		//    @Test 注解的位置只能用在类上,其他位置会报错
		    public void test() {
		        System.out.println("test");
		    }
		}


五、IO读取一行写出一行
	--BufferedReader 
		--readLine()  专门用来读取一行数据
	--PrintWriter
		--println()  专门用来写出一行数据
	--测试
		package cn.tedu.tickets;

		import java.io.*;

		//读取一行写出一行
		public class Test5_IO {
		    public static void main(String[] args) throws IOException {
		        //1、创建读取流对象，负责一行一行读取
		        BufferedReader in = new BufferedReader(
		                new FileReader("D:\\iotest\\1.txt"));

		        //2、创建写出流对象，负责一行一行写出
		        PrintWriter out = new PrintWriter(
		                    new FileWriter("D:\\iotest\\22.txt") ) ;

		        //3、读一行写一行
		        String line;//保存读取到的一行数据，readLine()如果没有读取到就是null
		        while ( ( line = in.readLine() )  != null ){
		            //println()把读取到的数据line一行一行写出
		            out.println(line);
		        }

		        //4、释放资源
		        in.close();
		        out.close();
		    }
		}
		