一、序列化 / 反序列化 ：
	--0、常用于服务器之间进行Java对象的数据传输，序列化成文件永久保存，反序列化						读取数据恢复成Java对象。
	--1、序列化：
		是指把程序中的Java对象 ，输出 ，永久的保存在磁盘中。用来在多个服务器直接传输Java对象的		信息。
		需要使用工具类ObjectOutputStream完成序列化。
         	--ObjectOutputStream(OutputStream out) 含参构造
		 	--void writeObject(Object obj)
               将指定的对象写入 ObjectOutputStream。 
	--2、反序列化：
		是指把磁盘中，已经被序列化好的文件。读取，恢复到程序中的过程。
		需要使用工具类ObjectInputStream完成反序列化。
			--ObjectInputStream(InputStream in) 含参构造
			--Object readObject()
     			 从 ObjectInputStream 读取对象，读取序列化数据。
	--3、测试：
		package cn.tedu.io;

		import java.io.FileInputStream;
		import java.io.FileNotFoundException;
		import java.io.FileOutputStream;
		import java.io.IOException;
		import java.io.ObjectInputStream;
		import java.io.ObjectOutputStream;
		import java.io.Serializable;

		//这个类用来测试 序列化  反序列化
		public class Test1_Seria {
			public static void main(String[] args) {
		//		method() ; //序列化
				method2();//反序列化
			}
			//反序列化：把磁盘中已经序列化好的文件，读取，恢复成Java对象
			public static void method2() {
				try {
					//创建反序列化对象
					ObjectInputStream in = new ObjectInputStream(
												new FileInputStream("D:\\iotest\\1.txt"));
					//开始反序列化
					Object obj = in.readObject();
					System.out.println(obj);//Student [name=皮皮霞, age=22]
					
					//释放资源
					in.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
				
			}
			//序列化：把Java对象， 输出 ，永久保存到磁盘中
			public static void method() {
				try {
					Student s = new Student("皮皮霞",22);
					//创建序列化对象
					ObjectOutputStream out = new ObjectOutputStream(
													new FileOutputStream("D:\\iotest\\1.txt")) ;
					//开始序列化
					out.writeObject(s);
					
					//释放资源
					out.close();
				} catch (IOException e) {
					e.printStackTrace();
				} 
				
			}
		}
		//创建Student
		//1、如果你的文件，想要支持序列化，必须实现Serializable接口，算是开启了序列化功能
		//否则：java.io.NotSerializableException: cn.tedu.io.Student
		class Student implements Serializable{
			
			//2、自动生成本文件的一个唯一标识，版本号id
			private static final long serialVersionUID = 1L;
			
			//构造方法
			public Student() {}
			public Student(String name, int age) {
				super();
				this.name = name;
				this.age = age;
			}
			private String name ;
			private int age ;
			//set() get()
			public String getName() {
				return name;
			}
			public void setName(String name) {
				this.name = name;
			}
			public int getAge() {
				return age;
			}
			public void setAge(int age) {
				this.age = age;
			} 
			//toString()
			@Override
			public String toString() {
				return "Student [name=" + name + ", age=" + age + "]";
			}
		}









二、编码转换流：常用于解决字符流读写时的中文乱码现象
	-- 简单描述中文乱码现象：由于保存时使用的码表和打开时使用的码表不一致造成的。
	-- 测试
		package cn.tedu.io;

		import java.io.BufferedWriter;
		import java.io.FileNotFoundException;
		import java.io.FileOutputStream;
		import java.io.OutputStream;
		import java.io.OutputStreamWriter;
		import java.io.Writer;

		//这个类用来测试  编码转换流：可以把字节流转成字符流
		//OutputStreamWriter：写出中文时，可能会产生乱码，需要你指定码表
		//InputStreamReader：读取中文时，可能会产生乱码，需要你指定码表
		public class Test2_Encoding {
			public static void main(String[] args) {
				try {
					//1、提供字节流
					OutputStream out = new FileOutputStream("D:\\iotest\\1.txt");
					
		//2、提供字符流 -- BufferedWriter的参数也需要是字符流，但是我们只有字节流，怎么转呢？--桥梁
		//			Writer out2 =  new BufferedWriter(new OutputStreamWriter(out));//默认打开和保存都是gbk
		//			Writer out2 =  new BufferedWriter(
		//								new OutputStreamWriter(out,"ISO-8859-1"));//乱码
					Writer out2 =  new BufferedWriter(new OutputStreamWriter(out,"gbk"));//中文乱码的解决方案
					out2.write("大家好，我叫渣渣辉");
					
					//3、释放资源
					out2.close();
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
			}
		}

三、泛型
	--1、标志<> 。常用来约束集合中的元素类型。并且能把报错时机提前。
	--2、测试
		package cn.tedu.io;
		import java.util.ArrayList;
		import java.util.List;
		public class Test3_Generic {
			public static void main(String[] args) {
				//3、不使用泛型约束的集合，可以添加任意类型元素
		//		List list = new ArrayList() ;
				
				//5、泛型约束的元素类型 ，<what> --  what是指元素类型，而且写引用类型不能写基本类型！！
				List<Integer> list = new ArrayList<>() ;//4、使用了泛型，约束了集合中元素类型必须是String
				
				//1、限制集合中的元素类型？  -- 泛型的作用1：可以检查数据的类型。如果类型对才可以向集合中添加。
				//2、泛型的作用2：可以把报错的时机提前，如果有错编译都通不过，必须改。
				//问题是：向集合中添加任意类型的数据，太自由！！
				list.add(123);
		//		list.add("5.5");
		//		list.add("jack");
		//		list.add("rose");
				System.out.println(list);
			}
		}
	--3、泛型代码的通用性
		--使用泛型前
			package cn.tedu.io;

			//这个类用来测试 泛型的通用性
			public class Test4_Generic {
				public static void main(String[] args) {
					Integer[] a = {1,2,3,4,5};	
					print(a) ;
					
					Double[] b = {1.1,2.2,3.3,4.4,5.5};	
					print(b) ;
					
					String[] c = {""};	
			//		print(c) ;//1、问题是：又得提供重载的print()!!
				}
				public static void print(Double[] b) {
					//foreach:
					for(Double dou : b) {
						System.out.println(dou);
					}
				}
				public static void print(Integer[] a) {
			//		for (int i = 0; i < a.length; i++) {   System.out.println(a[i]);   }
					//foreach语法：提高普通for循环的执行效率  +  语法简洁 
					//for( 获取到的数据类型   变量名 : 想要循环的数组名){  循环体  }
					for( Integer  in : a ){  
						System.out.println(in);//in表示当前获取到的数据
					}
				}
			}
		--使用泛型后
			package cn.tedu.io;

			//这个类用来测试 泛型的通用性
			public class Test4_Generic {
				public static void main(String[] args) {
					Integer[] a = {1,2,3,4,5};	
					Double[] b = {1.1,2.2,3.3,4.4,5.5};	
					String[] c = {""};	
					
					print(a) ;
					print(b) ;
					print(c) ;//1、问题是：又得提供重载的print()!!
				}
				//2、以前参数列表，写死了，必须是具体类型。泛型写出通用代码，只要是E泛型类型就行。
				public static <E> void print(E[] a) {
			//		for (int i = 0; i < a.length; i++) {   System.out.println(a[i]);   }
					//foreach语法：提高普通for循环的执行效率  +  语法简洁 
					//for( 获取到的数据类型   变量名 : 想要循环的数组名){  循环体  }
					for( E  in : a ){  
						System.out.println(in);//in表示当前获取到的数据
					}
				}
			}

四、集合
	--1、作用是用来存储多个数据，集合中把每个数据叫元素。
	--2、存储数据，已经有数组了，新的容器--集合有优点？
		--对比：类型上来讲：数组只能存相同类型的数据。集合可以是多种类型。
		       长度上来讲：数组一旦创建长度就不能改变，集合长度可变。
		       遍历方式：数组常用下标遍历，方式单一。集合遍历多种多样。
		       使用场景：数组有下标适用于查询业务，不适于新增或者删除业务。
	--3、继承结构
	
五、Collection接口
	--1、本接口是集合中的顶级接口，提供的方法，被子接口或者实现类使用。但是作为接口不能		创建对象。
	--2、常用方法
		略，参考网页笔记
	--3、测试
		package cn.tedu.collection;

		import java.util.ArrayList;
		import java.util.Arrays;
		import java.util.Collection;
		import java.util.Iterator;

		//这个类用来测试 collection接口的使用
		public class Test5_Collection {
			public static void main(String[] args) {
				//1、创建collection对象
				Collection<String> c  = new ArrayList<>();
				
				//2、常用方法
				c.add("jack");//添加元素
				c.add("rose");
				c.add("hanmeimei");
				c.add("lilei");
		//		c.clear(); //清空集合
				System.out.println(c.contains("jack") );//判断是否包含
				System.out.println(c.equals("hanmeimei") );//判断是否相等
				System.out.println(c.hashCode());//获取集合在内存中的哈希码值
				System.out.println(c.isEmpty());//判断集合是否为空
				System.out.println(c.remove("lilei"));//删除指定元素
				System.out.println(c.size());//获取集合的长度
				Object[] obs = c.toArray();//把集合中的元素放入数组中
				System.out.println(Arrays.toString(obs));
				
				//集合间的操作----
				Collection<String> c2  = new ArrayList<>();
				
				//3、常用方法
				c2.add("jack");//添加元素
				c2.add("rose");
				c2.add("hello");
				
				System.out.println(c.addAll(c2));//添加另一个集合
				System.out.println(c.containsAll(c2));//是否包含另一个集合
				System.out.println(c);
		//		System.out.println(c.removeAll(c2));//删除另一个集合
		//		System.out.println(c);
		//		System.out.println(c.retainAll(c2));
		//		System.out.println(c);
		//		
				//4、集合元素的迭代
				Iterator<String> it = c.iterator() ;
				while( it.hasNext() ) {//hasNext()用来判断集合中是否还有下一个元素，有就返回true
					String value = it.next() ; //next()获取迭代到的元素
					System.out.println(value);
				}
				
			}
		}


六、List接口
	--1、概述
		有序的 collection（也称为序列）。此接口的用户可以对列表中每个元素的插入位置进		行精确地控制。用户可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元		素。与 set 不同，列表通常允许重复的元素。
	--2、特点
		--有序的
		--有索引
		--允许重复
	--3、特有方法--原因是List接口有索引
		void add(int index, E element)  
		boolean addAll(int index, Collection<? extends E> c)  
		E get(int index)  
		int indexOf(Object o)  
		int lastIndexOf(Object o)  
		ListIterator<E> listIterator()  
		E remove(int index)  
		E set(int index, E element)  
		List<E> subList(int fromIndex, int toIndex) 
	--4、测试
		package cn.tedu.collection;

		import java.util.ArrayList;
		import java.util.List;

		//这个类用来测试 List接口的使用：元素可重复  +  元素都有序  + 元素有索引
		public class Test6_List {
			public static void main(String[] args) {
				//1、创建List对象
				List<String> list = new ArrayList<>();
				
				//TODO 2、从Collection接口中继承来的方法
				
				//3、自己的特有方法
				list.add("java");
				list.add("php");
				list.add("hadoop");
				list.add("hadoop");
				list.add(null);
				list.add("hadoop");
				list.add(0,"皮皮霞");//按照索引添加元素
				System.out.println(list.get(1));//获取指定索引存着的元素
				System.out.println(list.indexOf("hadoop"));//获取第一次出现的索引值
				System.out.println(list.lastIndexOf("hadoop"));//获取最后一次出现的索引值
				
				System.out.println(list.remove(1));//把指定索引的元素干掉
				System.out.println(list.set(0,"刘沛霞"));//替换
				System.out.println(list);
				
				List<String> list2 = list.subList(1, 4);//截取子List，含头不含尾[1,4)
				System.out.println(list2);
				//TODO listIterator()
				
				
			}
		}

[作业]安装IDEA开发工具并完成HelloWorld测试
