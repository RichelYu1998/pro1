一、final关键字
	--1、测试
		package cn.tedu.finaldemo;
		//这个类用来测试   final关键字
		public class Test1_Final {
			public static void main(String[] args) {
				Erzi erzi = new Erzi();
		//		erzi.name = "赵" ;    //3.1、报错，已经被final了，值不能改，只能用用！！！
				System.out.println(erzi.NAME);
				System.out.println( BaBa.NAME );
			}
		}
		//创建父类
		//final class BaBa{//1、父类被final修饰后，变成了最终的类，不能被继承。The type Erzi cannot subclass the final class BaBa
		class BaBa{
			//2、当变量被final修饰后，就成了常量。值不能被修改。The final field BaBa.name cannot be assigned
			//4、常量名一般都是大写的。为了外界方便调用，通常也会被static修饰。
			static final String NAME = "刘" ;
			//3、当方法被final修饰后，就成了最终方法，不能被重写。Cannot override the final method from BaBa
			final public void study() {
				System.out.println("赚钱养家");
			}
		}
		//创建子类
		class Erzi extends BaBa{
			//方法重写：方法声明和父类一模一样
		//	public void study() {
		//		System.out.println("热爱java");
		//	}
		}








二、多态
	--1、概念
		同一对象，在不同时刻具有不同的形态。
	--2、特点
		--前提： 发生继承关系  +  方法重写
		--口诀1：父类引用指向子类对象
			--Animal a = new Dog();
		--口诀2：多态中，编译看左边，运行看右边
			--编译看左边：想要保存成功，看父类
			--运行看右边：想要结果，找子类
	--3、入门案例
		package cn.tedu.multi;

		//这类用来 测试  多态 
		public class Test2_Multi {
			public static void main(String[] args) {
				//创建子类对象测试
				Dog d = new Dog();  
				d.eat();   //狗吃肉
				
				//创建多态对象测试
				Animal a = new  Dog() ;  //口诀1：父类引用  指向 子类对象，多态  / 向上转型 
				a.eat()  ; // 口诀2：编译看左边，运行看右边
				//2、编译看左边：意思是 想要保存成功 必须  使用 左边也就是父类 提供的功能！！！
				//3、运行看右边： 意思是   最终的执行结果 以子类的 实现为准！！
				//4、多态的好处：是用来统一调用的标准！！！标准就是父类！！！！如果父类没提供就不能用！！
			}
		}
		//1、多态前提：继承 + 重写
		class Animal{
			public void eat() {
				System.out.println("吃啥都行") ;
			}
		}
		class Dog extends Animal{
			//方法重写
			public void eat() {
				System.out.println("狗吃肉");
			}
		}

三、
			